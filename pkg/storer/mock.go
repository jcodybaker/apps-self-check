// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storer is a generated GoMock package.
package storer

import (
	context "context"
	reflect "reflect"
	time "time"

	check "github.com/digitalocean/apps-self-check/pkg/types/check"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// AnalyzeLongestGapPerApp mocks base method.
func (m *MockStorer) AnalyzeLongestGapPerApp(ctx context.Context, start, end time.Time, apps []string, output func(string, time.Duration, time.Time)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeLongestGapPerApp", ctx, start, end, apps, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnalyzeLongestGapPerApp indicates an expected call of AnalyzeLongestGapPerApp.
func (mr *MockStorerMockRecorder) AnalyzeLongestGapPerApp(ctx, start, end, apps, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeLongestGapPerApp", reflect.TypeOf((*MockStorer)(nil).AnalyzeLongestGapPerApp), ctx, start, end, apps, output)
}

// AsyncQueryRetry mocks base method.
func (m *MockStorer) AsyncQueryRetry(ctx context.Context, attemptSchedule []time.Duration, f func(context.Context, int) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncQueryRetry", ctx, attemptSchedule, f)
}

// AsyncQueryRetry indicates an expected call of AsyncQueryRetry.
func (mr *MockStorerMockRecorder) AsyncQueryRetry(ctx, attemptSchedule, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncQueryRetry", reflect.TypeOf((*MockStorer)(nil).AsyncQueryRetry), ctx, attemptSchedule, f)
}

// Close mocks base method.
func (m *MockStorer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorer)(nil).Close))
}

// SaveCheckResults mocks base method.
func (m *MockStorer) SaveCheckResults(ctx context.Context, result check.CheckResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCheckResults", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCheckResults indicates an expected call of SaveCheckResults.
func (mr *MockStorerMockRecorder) SaveCheckResults(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCheckResults", reflect.TypeOf((*MockStorer)(nil).SaveCheckResults), ctx, result)
}

// UpdateInstance mocks base method.
func (m *MockStorer) UpdateInstance(ctx context.Context, instance *check.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", ctx, instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockStorerMockRecorder) UpdateInstance(ctx, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockStorer)(nil).UpdateInstance), ctx, instance)
}
