// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storer is a generated GoMock package.
package storer

import (
	context "context"
	reflect "reflect"
	time "time"

	check "github.com/digitalocean/apps-self-check/pkg/types/check"
	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// AnalyzeLongestGapPerApp mocks base method.
func (m *MockStorer) AnalyzeLongestGapPerApp(ctx context.Context, start, end time.Time, apps []string, output func(string, time.Duration, time.Time)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeLongestGapPerApp", ctx, start, end, apps, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnalyzeLongestGapPerApp indicates an expected call of AnalyzeLongestGapPerApp.
func (mr *MockStorerMockRecorder) AnalyzeLongestGapPerApp(ctx, start, end, apps, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeLongestGapPerApp", reflect.TypeOf((*MockStorer)(nil).AnalyzeLongestGapPerApp), ctx, start, end, apps, output)
}

// AsyncSaveCheckResults mocks base method.
func (m *MockStorer) AsyncSaveCheckResults(ctx context.Context, result check.CheckResults, attemptSchedule []time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncSaveCheckResults", ctx, result, attemptSchedule)
}

// AsyncSaveCheckResults indicates an expected call of AsyncSaveCheckResults.
func (mr *MockStorerMockRecorder) AsyncSaveCheckResults(ctx, result, attemptSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncSaveCheckResults", reflect.TypeOf((*MockStorer)(nil).AsyncSaveCheckResults), ctx, result, attemptSchedule)
}

// Close mocks base method.
func (m *MockStorer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorer)(nil).Close))
}

// SaveCheckResults mocks base method.
func (m *MockStorer) SaveCheckResults(ctx context.Context, result check.CheckResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCheckResults", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCheckResults indicates an expected call of SaveCheckResults.
func (mr *MockStorerMockRecorder) SaveCheckResults(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCheckResults", reflect.TypeOf((*MockStorer)(nil).SaveCheckResults), ctx, result)
}

// Mockstorer is a mock of storer interface.
type Mockstorer struct {
	ctrl     *gomock.Controller
	recorder *MockstorerMockRecorder
}

// MockstorerMockRecorder is the mock recorder for Mockstorer.
type MockstorerMockRecorder struct {
	mock *Mockstorer
}

// NewMockstorer creates a new mock instance.
func NewMockstorer(ctrl *gomock.Controller) *Mockstorer {
	mock := &Mockstorer{ctrl: ctrl}
	mock.recorder = &MockstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorer) EXPECT() *MockstorerMockRecorder {
	return m.recorder
}

// AnalyzeLongestGapPerApp mocks base method.
func (m *Mockstorer) AnalyzeLongestGapPerApp(ctx context.Context, start, end time.Time, apps []string, output func(string, time.Duration, time.Time)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnalyzeLongestGapPerApp", ctx, start, end, apps, output)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnalyzeLongestGapPerApp indicates an expected call of AnalyzeLongestGapPerApp.
func (mr *MockstorerMockRecorder) AnalyzeLongestGapPerApp(ctx, start, end, apps, output interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnalyzeLongestGapPerApp", reflect.TypeOf((*Mockstorer)(nil).AnalyzeLongestGapPerApp), ctx, start, end, apps, output)
}

// AsyncSaveCheckResults mocks base method.
func (m *Mockstorer) AsyncSaveCheckResults(ctx context.Context, result check.CheckResults, attemptSchedule []time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncSaveCheckResults", ctx, result, attemptSchedule)
}

// AsyncSaveCheckResults indicates an expected call of AsyncSaveCheckResults.
func (mr *MockstorerMockRecorder) AsyncSaveCheckResults(ctx, result, attemptSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncSaveCheckResults", reflect.TypeOf((*Mockstorer)(nil).AsyncSaveCheckResults), ctx, result, attemptSchedule)
}

// Close mocks base method.
func (m *Mockstorer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockstorerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockstorer)(nil).Close))
}

// SaveCheckResults mocks base method.
func (m *Mockstorer) SaveCheckResults(ctx context.Context, result check.CheckResults) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCheckResults", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCheckResults indicates an expected call of SaveCheckResults.
func (mr *MockstorerMockRecorder) SaveCheckResults(ctx, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCheckResults", reflect.TypeOf((*Mockstorer)(nil).SaveCheckResults), ctx, result)
}

// doneChan mocks base method.
func (m *Mockstorer) doneChan() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "doneChan")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// doneChan indicates an expected call of doneChan.
func (mr *MockstorerMockRecorder) doneChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "doneChan", reflect.TypeOf((*Mockstorer)(nil).doneChan))
}

// wgAdd mocks base method.
func (m *Mockstorer) wgAdd(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "wgAdd", arg0)
}

// wgAdd indicates an expected call of wgAdd.
func (mr *MockstorerMockRecorder) wgAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wgAdd", reflect.TypeOf((*Mockstorer)(nil).wgAdd), arg0)
}

// wgDone mocks base method.
func (m *Mockstorer) wgDone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "wgDone")
}

// wgDone indicates an expected call of wgDone.
func (mr *MockstorerMockRecorder) wgDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wgDone", reflect.TypeOf((*Mockstorer)(nil).wgDone))
}

// wgWait mocks base method.
func (m *Mockstorer) wgWait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "wgWait")
}

// wgWait indicates an expected call of wgWait.
func (mr *MockstorerMockRecorder) wgWait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "wgWait", reflect.TypeOf((*Mockstorer)(nil).wgWait))
}
